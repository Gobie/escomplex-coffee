// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var analyse, async, coffee, escomplex, getAst, walker;

  coffee = require('coffee-script');

  escomplex = require('escomplex');

  async = require('async');

  walker = require('./walker');

  analyse = function(source, options, next) {
    options || (options = {});
    if (Array.isArray(source)) {
      return async.reduce(source, [], function(memo, s, next) {
        return getAst(s.code, options.ignoreErrors, function(e, ast) {
          if (e) {
            return next(e);
          }
          memo.push({
            ast: ast,
            path: s.path
          });
          return next(null, memo);
        });
      }, function(e, sources) {
        if (e) {
          return next(e);
        }
        return escomplex.analyse(sources, walker, options, next);
      });
    }
    return getAst(source, options.ignoreErrors, function(e, ast) {
      if (e) {
        return next(e);
      }
      return escomplex.analyse(ast, walker, options, next);
    });
  };

  exports.analyse = analyse;

  getAst = async.ensureAsync(function(source, ignoreErrors, next) {
    var ast, e, error, lastExp;
    if (source.length === 0) {
      return next();
    }
    ast = null;
    try {
      ast = coffee.nodes(source);
    } catch (error) {
      e = error;
      if (ignoreErrors) {
        return next();
      }
      return next(e);
    }
    lastExp = ast.expressions[ast.expressions.length - 1];
    ast.loc = {
      start: {
        line: ast.locationData.first_line
      },
      end: {
        line: (lastExp != null ? lastExp : ast).locationData.last_line
      }
    };
    return next(null, ast);
  });

}).call(this);
